<?php

namespace common\models;

//use app\behaviors\SeoBehavior;
use yii\db\Exception;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "product".
 *
 * @property int $id
 * @property string $name
 * @property string $price
 * @property string $description
 * @property string $unit
 * @property string $photo
 * @property int $brand_id
 * @property int $category_id
 */
class Category extends \kartik\tree\models\Tree
{

    const SHOW_MENU = 1;

    public static function tableName()
    {
        return 'category';
    }

    public function rules()
    {
        return [
            [['name'], 'required'],
            [['name'], 'unique'],
            [['description', 'photo'], 'string'],
            [['active', 'visible', 'disabled', 'child_allowed', 'show_menu'], 'safe']
        ];
    }

    public function attributeLabels()
    {
        return [
            'id' => 'Номер',
            'name' => 'Название',
            'description' => 'Описание',
            'category-child_allowed' => 'Разрешить подкатегории',
            'active' => 'Активная',
            'visible' => 'Включена',
            'disabled' => 'Отключена',
            'child_allowed' => 'Разрешены подкатегории',
            'photo' => 'Изображение',
            'show_menu' => 'Видна в меню категорий'
        ];
    }

    /**
     * @var string the classname for the TreeQuery that implements the NestedSetQueryBehavior.
     * If not set this will default to `kartik    ree\models\TreeQuery`.
     */
    public static $treeQueryClass; // change if you need to set your own TreeQuery

    /**
     * @var bool whether to HTML encode the tree node names. Defaults to `true`.
     */
    public $encodeNodeNames = true;

    /**
     * @var bool whether to HTML purify the tree node icon content before saving.
     * Defaults to `true`.
     */
    public $purifyNodeIcons = true;

    /**
     * @var array activation errors for the node
     */
    public $nodeActivationErrors = [];

    /**
     * @var array node removal errors
     */
    public $nodeRemovalErrors = [];

    /**
     * @var bool attribute to cache the `active` state before a model update. Defaults to `true`.
     */
    public $activeOrig = true;

    /**
     * @inheritdoc
     */

    public $child_allowed = true;


    public static function find()
    {
        return new CategoryQuery(get_called_class());
    }

    public function children($depth = null)
    {
        $condition = [
            'and',
            ['>', $this->leftAttribute, $this->owner->getAttribute($this->leftAttribute)],
            ['<', $this->rightAttribute, $this->owner->getAttribute($this->rightAttribute)],
        ];
        if ($depth !== null) {
            $condition[] = ['<=', $this->depthAttribute, $this->owner->getAttribute($this->depthAttribute) + $depth];
        }
        $this->applyTreeAttributeCondition($condition);
        return $this->owner->find()->andWhere($condition)->addOrderBy([$this->leftAttribute => SORT_ASC]);
    }

    protected function applyTreeAttributeCondition(&$condition)
    {
        if ($this->treeAttribute !== false) {
            $condition = [
                'and',
                $condition,
                [$this->treeAttribute => $this->owner->getAttribute($this->treeAttribute)]
            ];
        }
    }

    public function getSeo()
    {
        return $this->hasOne(Seo::className(), ['entity_id' => 'id'])->where(['entity_type' => get_class($this)]);
    }

    public function afterSave($insert, $changedAttributes)
    {
        $this->attachBehavior('SeoBehavior', new \common\behaviors\SeoBehavior());
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
}
